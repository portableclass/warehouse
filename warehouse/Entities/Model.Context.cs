//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace warehouse.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WarehouseEntities : DbContext
    {
        private static WarehouseEntities ctxEntities;

        public WarehouseEntities()
            : base("name=WarehouseEntities")
        {
        }

        public static WarehouseEntities GetCtx()
        {
            if (ctxEntities == null)
                ctxEntities = new WarehouseEntities();

            return ctxEntities;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Booking { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<Discount> Discount { get; set; }
        public virtual DbSet<Goods> Goods { get; set; }
        public virtual DbSet<GoodsBooking> GoodsBooking { get; set; }
        public virtual DbSet<GoodsStorage> GoodsStorage { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<Provider> Provider { get; set; }
        public virtual DbSet<Storage> Storage { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Worker> Worker { get; set; }
        public virtual DbSet<WorkerBooking> WorkerBooking { get; set; }
    
        public virtual int ChangeGoodsAmountOnBooking(Nullable<int> amount, Nullable<int> goodsStorageId)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var goodsStorageIdParameter = goodsStorageId.HasValue ?
                new ObjectParameter("GoodsStorageId", goodsStorageId) :
                new ObjectParameter("GoodsStorageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeGoodsAmountOnBooking", amountParameter, goodsStorageIdParameter);
        }
    
        public virtual int NewBooking(Nullable<int> goodsId, Nullable<int> bookingId, Nullable<int> customerId, Nullable<int> goodsBookingAmount)
        {
            var goodsIdParameter = goodsId.HasValue ?
                new ObjectParameter("GoodsId", goodsId) :
                new ObjectParameter("GoodsId", typeof(int));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var goodsBookingAmountParameter = goodsBookingAmount.HasValue ?
                new ObjectParameter("GoodsBookingAmount", goodsBookingAmount) :
                new ObjectParameter("GoodsBookingAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewBooking", goodsIdParameter, bookingIdParameter, customerIdParameter, goodsBookingAmountParameter);
        }
    
        public virtual int NewClient_(string customerName, string customerSurname, string customerPatronymic, string customerPhoneNumber, string customerCity, string customerStreet, string customerHouse, Nullable<int> customerPostalCode)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerSurnameParameter = customerSurname != null ?
                new ObjectParameter("CustomerSurname", customerSurname) :
                new ObjectParameter("CustomerSurname", typeof(string));
    
            var customerPatronymicParameter = customerPatronymic != null ?
                new ObjectParameter("CustomerPatronymic", customerPatronymic) :
                new ObjectParameter("CustomerPatronymic", typeof(string));
    
            var customerPhoneNumberParameter = customerPhoneNumber != null ?
                new ObjectParameter("CustomerPhoneNumber", customerPhoneNumber) :
                new ObjectParameter("CustomerPhoneNumber", typeof(string));
    
            var customerCityParameter = customerCity != null ?
                new ObjectParameter("CustomerCity", customerCity) :
                new ObjectParameter("CustomerCity", typeof(string));
    
            var customerStreetParameter = customerStreet != null ?
                new ObjectParameter("CustomerStreet", customerStreet) :
                new ObjectParameter("CustomerStreet", typeof(string));
    
            var customerHouseParameter = customerHouse != null ?
                new ObjectParameter("CustomerHouse", customerHouse) :
                new ObjectParameter("CustomerHouse", typeof(string));
    
            var customerPostalCodeParameter = customerPostalCode.HasValue ?
                new ObjectParameter("CustomerPostalCode", customerPostalCode) :
                new ObjectParameter("CustomerPostalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewClient_", customerNameParameter, customerSurnameParameter, customerPatronymicParameter, customerPhoneNumberParameter, customerCityParameter, customerStreetParameter, customerHouseParameter, customerPostalCodeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
